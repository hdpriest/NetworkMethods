#!/usr/bin/perl
use warnings;
use strict;

use FindBin;
use lib "$FindBin::Bin/../Lib";
use Cwd;
use Tools;
use DataFrame;
use Configuration;
our $cwd = getcwd;

die "usage: perl $0 <configuration file>\n\n" unless $#ARGV==0;

my $Config=Configuration->new($ARGV[0]);

my $Prefix = $Config->get("OPTIONS","SQL_Prefix");
my $Dbase	= $Config->get("OPTIONS","DBName");
#[OPTIONS]
#SQL_Prefix      = Orth
#DBName  = Orthology
#OrthoFile       = /home/hpriest/Orthology/James/sorghum_intelligent_synteny.csv
#Sbicolor,Zmays,Zmays,Sitalica,panicA,panicB,dichan,Osativa,Bdistachyon,GEvo Link
#[GENELISTS]
my @Orthology = @{Tools->LoadFile($Config->get("OPTIONS","OrthoFile"))};
my $header = shift @Orthology;
my %Lists = %{_prepLists($header,$Config,$Dbase)};
## Now contains header-matched lists of unique int IDs associated with gene IDs
warn "Making Create Statements...\n";
my $Create = _GetCreateStatements($Dbase,$Prefix,\%Lists,$header);
print $Create."\n";
warn "Creating Gene Load Inserts...\n";
my $GeneLoadCommand = _loadGenes($Dbase,$Prefix,\%Lists,$header);
print $GeneLoadCommand."\n";
warn "Creating Orthology Load Inserts...\n";
my $OrthoLoadCommand = _loadOrtho($Dbase,$Prefix,\%Lists,$header,\@Orthology,$Config);
print $OrthoLoadCommand."\n";

sub _loadOrtho {
	my $Dbase = shift;
	my $Prefix= shift;
	my %Genes = %{$_[0]};
	my @header= split(/\,/,$_[1]);
	my @Orthology = @{$_[2]};
	my $Config = $_[3];
	my @fields = $Config->getAll("GENELISTS");
	my @specs = keys %Genes;
	my $ovr_state="";
	my %O;
	map {$O{$_}=[]} @specs;
	my @OIDs;
	my $oidFile="$cwd/orthoID.load.csv";
	for(my$i=0;$i<=$#Orthology;$i++){
		my $I=$i+1;
		my @line = split(/\,/,$Orthology[$i]);
		push @OIDs, $I;
		for(my$n=0;$n<=$#line;$n++){
			my $field = $Config->get("GENELISTS",$n);
			next if $field =~ m/none/i;
			my $s = $header[$n];
			if($line[$n]=~m/No Gene/i){
			}elsif($line[$n]=~m/None/i){
			}else{
				if(defined($Genes{$s}{$line[$n]})){
				}else{
					die "Can't find Gene id for $s $line[$n]\n";
				}
				my $gid = $Genes{$s}{$line[$n]};
				my $oid = $I;
				push @{$O{$s}}, $gid.",".$oid;
			}
		}
	}
	Tools->printToFile($oidFile,\@OIDs);
	$ovr_state .= "LOAD DATA INFILE '$oidFile' INTO TABLE `$Dbase`.`OrthologousGroups` fields terminated by ',' enclosed by '' lines terminated by '\\n';\n";
	foreach my $spec (@specs){
		my $File = "$cwd/$spec.orthoLoad.csv";
		my @output = @{$O{$spec}};
		Tools->printToFile($File,\@output);
		$ovr_state .= "LOAD DATA INFILE '$File' INTO TABLE `$Dbase`.`$spec"."_Ortho` fields terminated by ',' enclosed by '' lines terminated by '\\n';\n";
	}
	my %used;
	for(my$i=0;$i<=$#header;$i++){
		my $prefix=$header[$i];
		my $list = $Config->get("GENELISTS",$i);
		my $name = $Config->get("DISPLAYNAMES",$i);
		next if $list eq "none";
		next if defined $used{$prefix};
		my $statement="INSERT INTO `$Dbase`.`OrthoMapReference` (`prefix`,`display_name`) VALUES ('$prefix','$name');\n";
		$ovr_state .= $statement;
		$used{$prefix}=1;
	}
	return $ovr_state;
}

sub _prepLists {
	my $header=shift;
	my $Config=shift;
	my $Dbase =shift;
	my @header = split(/\,/,$header);
	my @Fields = $Config->getAll("GENELISTS");
	my %Lists;
	foreach my $f (@Fields){
		my $file = $Config->get("GENELISTS",$f);
		next if $file=~ m/none/i;
		my @File=@{Tools->LoadFile($file)};
		my $s = $header[$f];
		$Lists{$s}={};
		for(my$i=0;$i<=$#File;$i++){
			my $I=$i+1;
			$Lists{$s}{$File[$i]}=$I;
		}
	}
	return \%Lists;
}

sub _loadGenes {
	my $Dbase = shift;
	my $Prefix= shift;
	my %Genes = %{$_[0]};
	my @header= split(/\,/,$_[1]);
	my @specs = keys %Genes;
	my $ovr_state="";
	foreach my $spec (@specs){
		my $File = "$cwd/$spec.geneLoad.csv";
		my @output;
		foreach my $g (keys %{$Genes{$spec}}){
			my $line="$Genes{$spec}{$g},$g";
			push @output, $line;
		}
		Tools->printToFile($File,\@output);
		$ovr_state .= "LOAD DATA INFILE '$File' INTO TABLE `$Dbase`.`$spec"."_Genes` fields terminated by ',' enclosed by '' lines terminated by '\\n';\n";
	}
	return $ovr_state;
}

sub _GetCreateStatements {
	my $dbase = shift;
	my $prefix= shift;
	my %Lists=%{$_[0]};
	my @header= split(/\,/,$_[1]);
	my @K = keys %Lists;
	my $statement ="
-- MySQL Script generated by MySQL Workbench
-- 05/18/15 18:43:58
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET \@OLD_UNIQUE_CHECKS=@\@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET \@OLD_FOREIGN_KEY_CHECKS=@\@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET \@OLD_SQL_MODE=@\@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `$dbase` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `$dbase` ;
-- -----------------------------------------------------
-- Table `$dbase`.`OrthologousGroups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `$dbase`.`OrthologousGroups` (
  `orth_id` INT NOT NULL,
  PRIMARY KEY (`orth_id`),
  UNIQUE INDEX `orth.id_UNIQUE` (`orth_id` ASC))
ENGINE = MyISAM;

-- -----------------------------------------------------
-- Table `$dbase`.`OrthoMapOut`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `$dbase`.`OrthoMapOut` (
  `ortho_prefix` VARCHAR(45) NOT NULL,
  `network_prefix` VARCHAR(45) NOT NULL,
  INDEX `orthopref_idx` (`ortho_prefix` ASC),
  INDEX `netpref_idx` (`network_prefix` ASC))
ENGINE = MyISAM;


-- -----------------------------------------------------
-- Table `$dbase`.`OrthoMapReference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `$dbase`.`OrthoMapReference` (
  `prefix` VARCHAR(45) NOT NULL,
  `display_name` VARCHAR(45) NOT NULL,
  INDEX `prefix_idx` (`prefix` ASC),
  INDEX `name_idx` (`display_name` ASC))
ENGINE = MyISAM;

";
	foreach my $s (@K){
		$statement.="
-- -----------------------------------------------------
-- Table `$dbase`.`$s"."_Genes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `$dbase`.`$s"."_Genes` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `gene.id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = MyISAM;

-- -----------------------------------------------------
-- Table `$dbase`.`$s"."_Ortho`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `$dbase`.`$s"."_Ortho` (
  `id` INT NOT NULL,
  `orth_id` INT,
  INDEX `id_idx` (`id` ASC),
  INDEX `orth_id_idx` (`orth_id` ASC),
  CONSTRAINT `$s.orth.g`
    FOREIGN KEY (`id`)
    REFERENCES `$dbase`.`$s."."_Genes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `$s.orth.o`
    FOREIGN KEY (`orth_id`)
    REFERENCES `$dbase`.`OrthologousGroups` (`orth_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = MyISAM;

";
	}
	$statement.="
SET SQL_MODE=\@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=\@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=\@OLD_UNIQUE_CHECKS;
";
	return $statement;
}
